import psycopg2
import pandas as pd

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ‚Äî –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
conn_params = {
    "dbname": "movies_db",
    "user": "amanbelgibay",   # —Ç–≤–æ–π PostgreSQL –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    "password": "0909",
    "host": "localhost",
    "port": 5432
}

# SQL-–∑–∞–ø—Ä–æ—Å—ã (–±–µ—Ä—ë–º 2 –ø—Ä–∏–º–µ—Ä–∞: —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –≥–æ–¥–∞–º –∏ —Ç–æ–ø-10 —Ñ–∏–ª—å–º–æ–≤)
queries = {
    "avg_rating_by_year": """
        SELECT 
          regexp_replace(title, '.*\\((\\d{4})\\).*', '\\1')::INT AS release_year,
          AVG(rating) AS avg_rating,
          COUNT(*) AS num_ratings
        FROM ratings r
        JOIN movies m ON r.movieid = m.movieid
        WHERE title ~ '\\(\\d{4}\\)'
        GROUP BY release_year
        ORDER BY release_year;
    """,
    "top10_movies_by_ratings_count": """
        SELECT m.title, COUNT(r.rating) AS num_ratings
        FROM ratings r
        JOIN movies m ON r.movieid = m.movieid
        GROUP BY m.title
        ORDER BY num_ratings DESC
        LIMIT 10;
    """
}

def run_query(conn, sql):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame"""
    return pd.read_sql(sql, conn)

def main():
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    try:
        conn = psycopg2.connect(**conn_params)
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã
        for name, sql in queries.items():
            print(f"\nüîπ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞: {name}")
            df = run_query(conn, sql)
            print(df.head())  # –≤—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
            csv_filename = f"{name}.csv"
            df.to_csv(csv_filename, index=False)
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {csv_filename}")

    except Exception as e:
        print("–û—à–∏–±–∫–∞:", e)
    finally:
        if 'conn' in locals():
            conn.close()
            print("üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == "__main__":
    main()